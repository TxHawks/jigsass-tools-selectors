// ***************************************
//
// # Object
// -> Define and call reusable css objects
//    without bloat.
//
// Author: TxHawks (tofu.hawks@gmail.com)
//
// ***************************************

@charset 'UTF-8';

// -------------------------------------
// Dependencies
// -------------------------------------

@if (not (global-variable-exists(jigsass-breakpoints) and mixin-exists(jigsass-mq))) {
  @error '`jigsass-tools-selectors` has a dependency on `jigsass-tools-mq`. Please import it.';
}

@if (not function-exists(jigsass-strip-unit)) {
  @error '`jigsass-tools-selectors` has a dependency on `jigsass-tools-typography`. ' +
    'Please import it before this file.';
}





// -------------------------------------
// Functions
// -------------------------------------

/// Get media query arguments of current context.
/// For use inside `jigsass-define-object`.
///
/// When called inside the `@contnet` block without arguments,
/// it will return a map with `from`, `until` and `misc` keys,
/// holding the arguments passed to the media query in the
/// current context of `@content`.
///
/// When called with an argument of `from`, `until` or `misc`, it
/// will return the value of of that key from the above map.
/// ---
/// @param {String | Boolean} $type [false]
///   The type of media-query argument to check.
///   May be `from`, `until` or `misc`.
///   If false, Will return a map of all of the above.
/// ---
/// @return {String | Map}
///   The value attached to the queried `$type`, or a map of all
///   three types.
/// ---
/// @group Selectors - 04 Define
/// ---
@function jigsass-get-obj-mq($type: false) {
  @if($_jigsass-obj-current-mq-args) {
    @return if(
      $type,
      map-get($_jigsass-obj-current-mq-args, $type),
      $_jigsass-obj-current-mq-args
    );
  }

  @return null;
}





// -------------------------------------
// Variables
// -------------------------------------

//





// -------------------------------------
// Mixins
// -------------------------------------

/// Define a reusable object class.
///
/// Use the `jigsass-classname` mixin inside this mixin's
/// body to define the base object and each of it's modifiers
/// **(See example below)**.
///
/// When calling the `jigsass-get-obj-mq` function without arguments
/// inside the `@contnet` block, it will return a map with `from`,
/// `until` and `misc` keys, holding the arguments passed to the
/// media query in the current context of `@content`.
///
/// When called with an argument of `from`, `until` or `misc`, the
/// `jigsass-get-obj-mq` will return the value of of that key from
/// the above map.
/// ---
/// @param {String} $name
///   The name of the object class being defined, sans modifiers.
///   A modifier's name
/// ---
/// @example
///   @include jigsass-define-object(box) {
///     // Defines rules from `.box`
///     @include jigsass-classname() {
///       padding: if(jigsass-get-obj-mq(misc) == landscape, 24px 48px, 24px));
///     }
///
///     // Defines rules for `.box--cramped`
///     @include jigsass-classname() {
///     @include jigsass-classname(box, $modifier: cramped) {
///       padding: 12px;
///     }
///   }
/// ---
/// @group Selectors - 04 Define
/// ---
@mixin jigsass-define-object($name) {
  // Reset in global scope
  $_jigsass-obj-current-mq-args: (from: false, until: false, misc: false) !global;
  $_jigsass-obj-current-name: $name !global;

  $_lengths: jigsass-mq-sort-length-breakpoints();
  $_features: map-get($jigsass-breakpoints, features);

  // Width breakpoints
  @if($_lengths) {
    // Min width breakpoints
    @each $bp-min, $length-min in $_lengths {
      @include jigsass-mq($from: $bp-min) {
        @if ($length-min != 0) {
          $_jigsass-obj-current-mq-args: (from: $bp-min, until: false, misc: false) !global;
        }

        @content;
      }
    }

    // Max width breakpoints
    @each $bp-max, $length-max in $_lengths {
      @if (jigsass-strip-unit($length-max) != 0) {
        @include jigsass-mq($until: $bp-max) {
          $_jigsass-obj-current-mq-args: (from: false, until: $bp-max, misc: false) !global;

          @content;
        }
      }
    }

    // Min and max width breakpoints
    @each $bp-min, $length-min in $_lengths {
      @each $bp-max, $length-max in $_lengths {
        @if (
          jigsass-strip-unit($length-min) != 0 and
          jigsass-strip-unit($length-max) != 0 and
          $length-max > $length-min
        ) {
          @include jigsass-mq($from: $bp-min, $until: $bp-max) {
            $_jigsass-obj-current-mq-args: (from: $bp-min, until: $bp-max, misc: false) !global;

            @content;
          }
        }
      }
    }
  }

  // Misc media query features breakpoints
  @if ($_features) {
    @each $misc-bp, $expression in $_features {
      @include jigsass-mq($misc: $misc-bp) {
        $_jigsass-obj-current-mq-args: (from: false, until: false, misc: $misc-bp) !global;

        @content;
      }
    }

    // Width and misc media queries
    @if($_lengths) {
      // Min width and feature breakpoints
      @each $bp-min, $length-min in $_lengths {
        @if (jigsass-strip-unit($length-min) != 0) {
          @each $misc-bp, $expression in $_features {
            @include jigsass-mq($from: $bp-min, $misc: $misc-bp) {
              $_jigsass-obj-current-mq-args: (from: $bp-min, until: false, misc: $misc-bp) !global;

              @content;
            }
          }
        }
      }

      // Max width and feature breakpoints
      @each $bp-max, $length-max in $_lengths {
        @if (jigsass-strip-unit($length-max) != 0) {
          @each $misc-bp, $expression in $_features {
            @include jigsass-mq($until: $bp-max, $misc: $misc-bp) {
              $_jigsass-obj-current-mq-args: (from: false, until: $bp-max, misc: $misc-bp) !global;

              @content;
            }
          }
        }
      }

      // Min and max width and feature breakpoints
      @each $bp-min, $length-min in $_lengths {
        @each $bp-max, $length-max in $_lengths {
          @if (
            jigsass-strip-unit($length-min) != 0 and
            jigsass-strip-unit($length-max) != 0 and
            $length-max > $length-min
          ) {
            @each $misc-bp, $expression in $_features {
              @include jigsass-mq($from: $bp-min, $until: $bp-max, $misc: $misc-bp) {
                $_jigsass-obj-current-mq-args: (
                  from: $bp-min,
                  until: $bp-max,
                  misc: $misc-bp
                ) !global;

                @content;
              }
            }
          }
        }
      }
    }
  }

  // Reset in global scope
  $_jigsass-obj-current-mq-args: null !global;
  $_jigsass-obj-current-name: null !global;
}


/// Generate CSS of an object class
///
/// No matter how many times the mixin is called with a
/// certain set of argument, only a single selector will
/// be created in the generated CSS.
///
/// **The generated class will be created where it
/// was defined**, not where it was called.
///
/// If `$jigsass-silent` is set to `true` when the mixin
/// is first called with a certain set of argument, no class
/// will be generated for that argument set.
/// ---
/// @param {String} $name
///   The name of the object to generate, as previously
///   defined by calling jigsass-define-object
/// @param {String | Boolean} $from
///   The name of breakpoint used as the min-width condition.
/// @param {String | Boolean} $until
///   The name of breakpoint used as the max-width condition.
/// @param {String | Boolean} $misc
///   The name of a miscellaneous media query condition.
/// @param {String | Boolean} $modifier
///   A modifier's name as previously
///   defined by calling jigsass-define-object
/// ---
/// @group Selectors - 05 Require
/// ---
@mixin jigsass-object($name, $from: false, $until: false, $misc: false, $modifier: false) {
  // Check if selector was already generated
  $_was-included: _jigsass-class-was-included($name, $from, $until, $misc, $modifier);

  // Generate selector.
  // Will only generate CSS once, where it was defined,
  // regardless of how many times `jigsass-object` was called
  // with the same arguments.
  @if (not $_was-included) {
    // Check that we are not in silent mode
    @if (not $jigsass-silent) {
      @include jigsass-mq($from, $until, $misc) {
        $selector-str: _jigsass-gen-class-name($name, $from, $until, $misc, $modifier);

        .#{$selector-str} {
          @extend %#{$selector-str};
        }
      }
    }

    $_bp-str: _jigsass-bp-string($from, $until, $misc);

    // Set class as defined in the `$_jigsass-selectors` map.
    $_selector-map: (
      $name: (
        $_bp-str: (
          $modifier or no-modifier: if($jigsass-silent, silent, true)
        )
      )
    );

    @if (not global-variable-exists(_jigsass-selectors)) { $_jigsass-selectors: () !global; }
    $_jigsass-selectors: jigsass-deep-merge($_jigsass-selectors, $_selector-map) !global;
  }
}




// -------------------------------------
// Private mixins
// -------------------------------------

/// Generate an object or object-modifier class name inside
/// `jigsass-define-object`
/// ---
/// @param {String} $name [$_jigsass-obj-current-name]
///   The object's base name. defaults to the name that was
///   passed in the calling `jigsass-define-object` mixin
/// @param {String | Number | false} $modifier [false]
///   A modifier's name
/// ---
/// @example
///   @include jigsass-define-object(box) {
///     // Defines rules from `.box`
///     @include jigsass-classname() {
///       padding: if(jigsass-get-obj-mq(misc) == landscape, 24px 48px, 24px));
///     }
///
///     // Defines rules for `.box--cramped`
///     @include jigsass-classname() {
///     @include jigsass-classname(box, $modifier: cramped) {
///       padding: 12px;
///     }
///   }
/// ---
/// @see {mixin} jigsass-define-object
/// ---
/// @group Selectors - 04 Define
/// ---
@mixin jigsass-classname($name: $_jigsass-obj-current-name, $modifier: false) {
  @if (not $name) {
    @error 'jigsass-classname: A `$name` is required for generating a selector.'
  }
  $from: jigsass-get-obj-mq(from);
  $until: jigsass-get-obj-mq(until);
  $misc: jigsass-get-obj-mq(misc);
  $selector-str: _jigsass-gen-class-name($name, $from, $until, $misc, $modifier);

  // Make sure $modifier is not called `no-modifier`.
  @if ($modifier) {
    @if ($modifier == 'no-modifier') {
      @error 'jigsass-classname: A jigsass class modifier cannot be called `no-modifier` ' +
        '(from #{$name}).';
    }
  }

  %#{$selector-str} {
    @content;
  }
}
